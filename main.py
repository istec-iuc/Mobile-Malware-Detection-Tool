import hashlib
import json
import os
import requests
from bs4 import BeautifulSoup
import argparse
import animation

parser = argparse.ArgumentParser(description="Android Malware Analysis Tools")
parser.add_argument('-a', '--apk', type=str, help='Upload Apk to scan',required=True)
parser.add_argument("-y", "--yara", type=str, metavar=(
    "<jadx path>", "<yara path>", "<path to the output directory>",
    "<path to the yara rule file>"), nargs=4,
                    help='Custom scan for the apk file')

group = parser.add_mutually_exclusive_group()
group.add_argument('-virustotal', '--v', help='virustotal scan', action="store_true")
group.add_argument('-pmalware', '--pm', help='malware analysis with pithus ', action="store_true")
args = parser.parse_args()
def urlpithus():
        pithus_url = "https://beta.pithus.org:443/apk/"
        pithus_cookies = {"csrftoken": "8gIypZCpTNgHeHUpKT80eHffzW7u9r3tdjttP1qIxrdzd9rnxeFuhAvgFJzGa7Zx"}
        files = {'apk': open(str(args.apk), 'rb')}
        pithus_headers = {"User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:85.0) Gecko/20100101 Firefox/85.0",
                          "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
                          "Accept-Language": "en-US,en;q=0.5", "Accept-Encoding": "gzip, deflate",
                          "Origin": "https://beta.pithus.org", "Connection": "close", "Referer": "https://beta.pithus.org/",
                          "Upgrade-Insecure-Requests": "1"}
        values = {'csrfmiddlewaretoken': 'Hp0fTIbQK4iYAQijCO1f1KPNkh3xlKBKMsLajKZ9oIfQziPhp9yJ4D5Oq4vJmqxO'}
        x = requests.post(pithus_url, headers=pithus_headers, cookies=pithus_cookies, files=files, data=values,
                          allow_redirects=False)
        a = requests.get("https://beta.pithus.org{}".format(x.headers["location"])).text
        soup = BeautifulSoup(a, 'lxml')
        return soup

def yara_scan():
    print("use double-backward slashes while writing the path ")
    jadx_dir = args.yara[0]
    yara_dir = args.yara[1]
    apk_dir = args.apk
    output_dir = args.yara[2]
    rule_path = args.yara[3]

    print("Extracting...")

    os.system(f'cmd /c "{jadx_dir}\\jadx -d {output_dir}  {apk_dir} "')
    os.system(f' cmd /c "{yara_dir}\\yara64" -r {rule_path} {output_dir}')


def baseInformation():
    div = urlpithus().findAll("h3", attrs={"class": "text-white"})
    hash = urlpithus().findAll("samp")
    print("**************************************************************")
    print("PERMISSIONS COUNT {}".format(div[0].text), "|||", "ACTIVITIES COUNT {}".format(div[1].text), "|||",
          "SERVICES COUNT {}".format(div[2].text), "|||", "RECIEVER COUNT {}".format(div[3].text), "|||",
          "DOMAINS COUNT {}".format(div[4].text))
    print("MD5 ", format(hash[0].text))
    print("SHA1 ", format(hash[1].text))
    print("SHA256 ", format(hash[2].text))
    print("File Size ", format(hash[3].text))


def malwareAnalysis():
    analysis = urlpithus().findAll('table', {"class": 'table table-condensed table-sm'})
    print(analysis[6].text)

def detectPermissions():
    analysis = urlpithus().findAll('table', {"class": 'table table-condensed table-sm'})
    print(analysis[11].text)
def apkFileVirusTotal():
    md5_hash = hashlib.md5()
    a_file = open(args.apk, "rb")
    content = a_file.read()
    md5_hash.update(content)
    digest = md5_hash.hexdigest()
    url = 'https://www.virustotal.com/vtapi/v2/file/report'
    api_key = input("Enter your virustotal api key")
    params = {'apikey': "e0d1b95ff43b0d27473cbcadb608763caffd2240b734bf78be8bdeb07f49cdf2", 'resource': digest}
    animation.getAnimation()
    response = requests.get(url, params=params)
    result = response.json()
    r1 = json.dumps(result)
    result_object = json.loads(r1)
    # print(result_object["scans"]["Bkav"]["detected"])
    for key in result_object["scans"]:
        if result_object["scans"][key]["detected"]:
            print("[+] Virus detected by {_key} virus type : {type}".format(_key=key,
                                                                            type=result_object["scans"][key]["result"]))
    print("Detected: " + str(result['positives']) + "/" + str(result['total']))

if __name__=='__main__':
        if args.apk and args.v:
            apkFileVirusTotal()
        if args.apk and args.pm:
            animation.getAnimation()
            baseInformation()
            malwareAnalysis()
        if args.yara:
            animation.getAnimation()
            yara_scan()


    # ''
